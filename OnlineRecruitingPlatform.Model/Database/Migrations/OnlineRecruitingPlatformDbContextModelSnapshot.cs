// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineRecruitingPlatform.Model.Database;

namespace OnlineRecruitingPlatform.Model.Database.Migrations
{
    [DbContext(typeof(OnlineRecruitingPlatformDbContext))]
    partial class OnlineRecruitingPlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "B867520A-92DB-4658-BE39-84DA53A601C0",
                            ConcurrencyStamp = "e7f7334b-cc4f-4dcd-8228-c559f1834315",
                            Name = "Администратор",
                            NormalizedName = "АДМИНИСТРАТОР"
                        },
                        new
                        {
                            Id = "2AABA004-1052-4F53-9EB3-18FA85386AD5",
                            ConcurrencyStamp = "b83bf03d-6204-469e-9027-ed44b9727080",
                            Name = "Соискатель",
                            NormalizedName = "СОИСКАТЕЛЬ"
                        },
                        new
                        {
                            Id = "8F525C31-6BCF-460F-86A3-BD51FA76F382",
                            ConcurrencyStamp = "9584c071-6850-4e6f-86e6-3c69e908d4a5",
                            Name = "Работодатель",
                            NormalizedName = "РАБОТОДАТЕЛЬ"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "21F7B496-C675-4E8A-A34C-FC5EC0762FDB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb2fbeb2-4838-4943-a176-f4e47ff1b067",
                            Email = "andrey.levchenko.2001@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREY.LEVCHENKO.2001@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOcSzpbdRSuCntkxYtzPTWSriuWAFXF5BaJMVHrOPM1jZaZZOfFxtPOMMdhX3CVXpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "21F7B496-C675-4E8A-A34C-FC5EC0762FDB",
                            RoleId = "B867520A-92DB-4658-BE39-84DA53A601C0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Aoguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CityId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.AgePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgePreferences");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ApplicantCommentAccessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantCommentAccessTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ApplicantCommentsOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantCommentsOrders");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ApplicantNegotiationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicantNegotiationStatuses");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Aoguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierParentFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierParentFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Aoguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierParentFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.BusinessTripReadiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessTripReadinessTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CertificateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificateTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdentifierFromAvitoRu")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBlacklisted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCommerce")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHolding")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHr")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Formatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyContactId");

                    b.ToTable("CompanyContactPhones");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardCompanyUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyInformation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyInsiderInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyInsiderInterviews");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyLocations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Original")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution240px")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution90px")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyLogos");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPhotos");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RelationId");

                    b.ToTable("CompanyRelations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanySubIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubIndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubIndustryId");

                    b.ToTable("CompanySubIndustries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CurrencyQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Nominal")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyQuotes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.DriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DriverLicenseTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EmployerActiveVacanciesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerActiveVacanciesOrders");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EmployerArchivedVacanciesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerArchivedVacanciesOrders");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EmployerRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerRelations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EmployerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.LanguageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PaidPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaidPeriods");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PayoutFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PayoutFrequencies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PlaceOfWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceOfWorks");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PreferredContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PreferredContactTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IdentifierFromZarplataRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ProfessionalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalAreas");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Aoguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierParentFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Relation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.RelocationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RelocationTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BusinessTripReadinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedAt")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HasVehicle")
                        .HasColumnType("bit");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTripReadinessId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ResumeStatusId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CertificateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeCertificates");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeCitizenship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeCitizenship");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PreferredContactTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PreferredContactTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeContacts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeContactPhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeContactPhoneId")
                        .IsUnique();

                    b.ToTable("ResumeContactPhones");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactsSiteType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResumeContactsSiteTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeDriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverLicenseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeDriverLicenseTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeEducations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationAdditional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeEducationId");

                    b.ToTable("ResumeEducationAdditional");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationAttestation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeEducationId");

                    b.ToTable("ResumeEducationAttestations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationElementary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeEducationId");

                    b.ToTable("ResumeEducationElementary");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationPrimary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniversityFacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeEducationId");

                    b.HasIndex("UniversityFacultyId");

                    b.ToTable("ResumeEducationPrimaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEmployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmploymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeEmployments");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeExperiences");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeKeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeKeySkills");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeLanguages");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Small")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumePhotos");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumePortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Small")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumePortfolios");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeRecommendations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelocationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RelocationTypeId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeRelocation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocationArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeRelocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ResumeRelocationId");

                    b.ToTable("ResumeRelocationAreas");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeSalaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ResumeSchedules");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeContactsSiteTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeContactsSiteTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeSites");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeSkills");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ResumeSpecializations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResumeStatuses");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTotalExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("ResumeTotalExperiences");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTravelTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TravelTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.HasIndex("TravelTimeId");

                    b.ToTable("ResumeTravelTimes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessionalAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalAreaId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Aoguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierParentFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Aoguid");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.SubIndustry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("SubIndustries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.TravelTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TravelTimes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synonyms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.UniversityFaculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("UniversityFaculties");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AcceptHandicapped")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptKids")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptPensioner")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptStudent")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptTemporary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgePreferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EducationLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmploymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdentifierFromAvitoRu")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromHeadHunter")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierFromZarplataRu")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayoutFrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Piecework")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlaceOfWorkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("RemoteInterview")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VacancyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VacancyVisibilityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkingDaysId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkingShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkingTimeIntervalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkingTimeModesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgePreferenceId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("PayPeriodId");

                    b.HasIndex("PayoutFrequencyId");

                    b.HasIndex("PlaceOfWorkId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProfessionalAreaId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VacancyTypeId");

                    b.HasIndex("VacancyVisibilityTypeId");

                    b.HasIndex("WorkingDaysId");

                    b.HasIndex("WorkingShiftId");

                    b.HasIndex("WorkingTimeIntervalsId");

                    b.HasIndex("WorkingTimeModesId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyBillingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacancyBillingTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyContacts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Formatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VacancyContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VacancyContactId");

                    b.ToTable("VacancyContactPhones");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyDriverLicenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverLicenseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DriverLicenseTypeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyDriverLicenseTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasTest")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VacancyBillingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VacancyBillingTypeId");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancyInformation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyKeySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyKeySkills");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacancyRelations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancySalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Bonus")
                        .HasColumnType("float");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Gross")
                        .HasColumnType("bit");

                    b.Property<int?>("LowerWageLimit")
                        .HasColumnType("int");

                    b.Property<int?>("LowerWageLimitRubles")
                        .HasColumnType("int");

                    b.Property<int?>("UpperWageLimit")
                        .HasColumnType("int");

                    b.Property<int?>("UpperWageLimitRubles")
                        .HasColumnType("int");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("VacancySalaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancySpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySpecializations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacancyTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyVisibilityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacancyVisibilityTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromAvitoRu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingShifts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeIntervals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimeIntervals");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeModes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentifierFromHeadHunter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimeModes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Address", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Building", "Building")
                        .WithMany("Addresses")
                        .HasForeignKey("BuildingId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId");

                    b.Navigation("Area");

                    b.Navigation("Building");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Area", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Region", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Building", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Street", "Street")
                        .WithMany("Buildings")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContact", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Address", "Address")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContactPhone", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContact", "CompanyContact")
                        .WithMany("CompanyContactPhones")
                        .HasForeignKey("CompanyContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyContact");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyInformation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithOne("Information")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.CompanyInformation", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyInsiderInterview", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("InsiderInterviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyLocation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyLogo", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithOne("Logo")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.CompanyLogo", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyPhoto", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("CompanyPhotos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyRelation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("Relations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Relation", "Relation")
                        .WithMany("CompanyRelations")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanySubIndustry", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("SubIndustries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.SubIndustry", "SubIndustry")
                        .WithMany("CompanySubIndustries")
                        .HasForeignKey("SubIndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SubIndustry");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CurrencyQuote", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Currency", "Currency")
                        .WithMany("CurrencyQuotes")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Region", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Resume", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.BusinessTripReadiness", "BusinessTripReadiness")
                        .WithMany("Resumes")
                        .HasForeignKey("BusinessTripReadinessId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Gender", "Gender")
                        .WithMany("Resumes")
                        .HasForeignKey("GenderId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeStatus", "ResumeStatus")
                        .WithMany("Resumes")
                        .HasForeignKey("ResumeStatusId");

                    b.Navigation("BusinessTripReadiness");

                    b.Navigation("Gender");

                    b.Navigation("ResumeStatus");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeCertificate", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.CertificateType", "CertificateType")
                        .WithMany("ResumeCertificates")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeCertificates")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateType");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeCitizenship", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Country", "Country")
                        .WithMany("ResumeCitizenship")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeCitizenship")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContact", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.PreferredContactType", "PreferredContactType")
                        .WithMany("ResumeContacts")
                        .HasForeignKey("PreferredContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeContacts")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredContactType");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactPhone", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContact", "ResumeContact")
                        .WithOne("ResumeContactPhone")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactPhone", "ResumeContactPhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeContact");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeDriverLicenseType", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.DriverLicenseType", "DriverLicenseType")
                        .WithMany("ResumeDriverLicenseTypes")
                        .HasForeignKey("DriverLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeDriverLicenseTypes")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverLicenseType");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.EducationLevel", "EducationLevel")
                        .WithMany("ResumeEducations")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeEducation")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationAdditional", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", "ResumeEducation")
                        .WithMany("ResumeEducationAdditionally")
                        .HasForeignKey("ResumeEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeEducation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationAttestation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", "ResumeEducation")
                        .WithMany("ResumeEducationAttestations")
                        .HasForeignKey("ResumeEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeEducation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationElementary", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", "ResumeEducation")
                        .WithMany("ResumeEducationElementary")
                        .HasForeignKey("ResumeEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeEducation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducationPrimary", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", "ResumeEducation")
                        .WithMany("ResumeEducationPrimaries")
                        .HasForeignKey("ResumeEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.UniversityFaculty", "UniversityFaculty")
                        .WithMany("ResumeEducationPrimaries")
                        .HasForeignKey("UniversityFacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResumeEducation");

                    b.Navigation("UniversityFaculty");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEmployment", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Employment", "Employment")
                        .WithMany("ResumeEmployments")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeEmployments")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employment");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeExperience", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("ResumeExperiences")
                        .HasForeignKey("AreaId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("ResumeExperiences")
                        .HasForeignKey("CompanyId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Company");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeKeySkill", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeKeySkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Skill", "Skill")
                        .WithMany("ResumeKeySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeLanguage", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Language", "Language")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.LanguageLevel", "LanguageLevel")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeLanguages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumePhoto", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumePhoto")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumePhoto", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumePortfolio", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumePortfolios")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRecommendation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeRecommendations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.RelocationType", "RelocationType")
                        .WithMany("ResumeRelocation")
                        .HasForeignKey("RelocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeRelocation")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocation", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelocationType");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocationArea", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("ResumeRelocationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocation", "ResumeRelocation")
                        .WithMany("ResumeRelocationAreas")
                        .HasForeignKey("ResumeRelocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("ResumeRelocation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSalary", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Currency", "Currency")
                        .WithMany("ResumeSalaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeSalary")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSalary", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSchedule", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeSchedules")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Schedule", "Schedule")
                        .WithMany("ResumeSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSite", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactsSiteType", "ResumeContactsSiteType")
                        .WithMany("ResumeSites")
                        .HasForeignKey("ResumeContactsSiteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeSites")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("ResumeContactsSiteType");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSkill", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeSkill")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSkill", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeSpecialization", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithMany("ResumeSpecializations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Specialization", "Specialization")
                        .WithMany("ResumeSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTotalExperience", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeTotalExperience")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTotalExperience", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTravelTime", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Resume", "Resume")
                        .WithOne("ResumeTravelTime")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.ResumeTravelTime", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.TravelTime", "TravelTime")
                        .WithMany("ResumeTravelTimes")
                        .HasForeignKey("TravelTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("TravelTime");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Specialization", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany("Specializations")
                        .HasForeignKey("ProfessionalAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfessionalArea");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Street", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("Streets")
                        .HasForeignKey("Aoguid");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.SubIndustry", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Industry", "Industry")
                        .WithMany("SubIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.UniversityFaculty", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.University", "University")
                        .WithMany("UniversityFaculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Address", "Address")
                        .WithMany("Vacancies")
                        .HasForeignKey("AddressId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.AgePreference", "AgePreference")
                        .WithMany("Vacancies")
                        .HasForeignKey("AgePreferenceId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Area", "Area")
                        .WithMany("Vacancies")
                        .HasForeignKey("AreaId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Company", "Company")
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.EducationLevel", "EducationLevel")
                        .WithMany("Vacancies")
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Employment", "Employment")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmploymentId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Experience", "Experience")
                        .WithMany("Vacancies")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.PaidPeriod", "PayPeriod")
                        .WithMany("Vacancies")
                        .HasForeignKey("PayPeriodId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.PayoutFrequency", "PayoutFrequency")
                        .WithMany("Vacancies")
                        .HasForeignKey("PayoutFrequencyId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.PlaceOfWork", "PlaceOfWork")
                        .WithMany("Vacancies")
                        .HasForeignKey("PlaceOfWorkId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Profession", "Profession")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProfessionalAreaId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Schedule", "Schedule")
                        .WithMany("Vacancies")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.VacancyType", "VacancyType")
                        .WithMany("Vacancies")
                        .HasForeignKey("VacancyTypeId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.VacancyVisibilityType", "VacancyVisibilityType")
                        .WithMany("Vacancies")
                        .HasForeignKey("VacancyVisibilityTypeId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.WorkingDays", "WorkingDays")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingDaysId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.WorkingShift", "WorkingShift")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingShiftId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeIntervals", "WorkingTimeIntervals")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeIntervalsId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeModes", "WorkingTimeModes")
                        .WithMany("Vacancies")
                        .HasForeignKey("WorkingTimeModesId");

                    b.Navigation("Address");

                    b.Navigation("AgePreference");

                    b.Navigation("Area");

                    b.Navigation("Company");

                    b.Navigation("EducationLevel");

                    b.Navigation("Employment");

                    b.Navigation("Experience");

                    b.Navigation("PayoutFrequency");

                    b.Navigation("PayPeriod");

                    b.Navigation("PlaceOfWork");

                    b.Navigation("Profession");

                    b.Navigation("ProfessionalArea");

                    b.Navigation("Schedule");

                    b.Navigation("VacancyType");

                    b.Navigation("VacancyVisibilityType");

                    b.Navigation("WorkingDays");

                    b.Navigation("WorkingShift");

                    b.Navigation("WorkingTimeIntervals");

                    b.Navigation("WorkingTimeModes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContact", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Address", "Address")
                        .WithMany("VacancyContacts")
                        .HasForeignKey("AddressId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithOne("VacancyContact")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContact", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContactPhone", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContact", "VacancyContact")
                        .WithMany("VacancyContactPhones")
                        .HasForeignKey("VacancyContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VacancyContact");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyDriverLicenseType", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.DriverLicenseType", "DriverLicenseType")
                        .WithMany("VacancyDriverLicenseTypes")
                        .HasForeignKey("DriverLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyDriverLicenseTypes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverLicenseType");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyInformation", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.VacancyBillingType", "VacancyBillingType")
                        .WithMany("VacancyInformation")
                        .HasForeignKey("VacancyBillingTypeId");

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithOne("VacancyInformation")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.VacancyInformation", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");

                    b.Navigation("VacancyBillingType");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyKeySkill", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Skill", "Skill")
                        .WithMany("VacancyKeySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancyKeySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancySalary", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Currency", "Currency")
                        .WithMany("VacancySalaries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithOne("VacancySalary")
                        .HasForeignKey("OnlineRecruitingPlatform.Model.Database.Entities.VacancySalary", "VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancySpecialization", b =>
                {
                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Specialization", "Specialization")
                        .WithMany("VacancySpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancySpecializations")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Address", b =>
                {
                    b.Navigation("CompanyContacts");

                    b.Navigation("Vacancies");

                    b.Navigation("VacancyContacts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.AgePreference", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Area", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CompanyLocations");

                    b.Navigation("ResumeExperiences");

                    b.Navigation("ResumeRelocationAreas");

                    b.Navigation("Streets");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Building", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.BusinessTripReadiness", b =>
                {
                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CertificateType", b =>
                {
                    b.Navigation("ResumeCertificates");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Company", b =>
                {
                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyPhotos");

                    b.Navigation("Information");

                    b.Navigation("InsiderInterviews");

                    b.Navigation("Locations");

                    b.Navigation("Logo");

                    b.Navigation("Relations");

                    b.Navigation("ResumeExperiences");

                    b.Navigation("SubIndustries");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.CompanyContact", b =>
                {
                    b.Navigation("CompanyContactPhones");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Country", b =>
                {
                    b.Navigation("Regions");

                    b.Navigation("ResumeCitizenship");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Currency", b =>
                {
                    b.Navigation("CurrencyQuotes");

                    b.Navigation("ResumeSalaries");

                    b.Navigation("VacancySalaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.DriverLicenseType", b =>
                {
                    b.Navigation("ResumeDriverLicenseTypes");

                    b.Navigation("VacancyDriverLicenseTypes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.EducationLevel", b =>
                {
                    b.Navigation("ResumeEducations");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Employment", b =>
                {
                    b.Navigation("ResumeEmployments");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Experience", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Gender", b =>
                {
                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Industry", b =>
                {
                    b.Navigation("SubIndustries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Language", b =>
                {
                    b.Navigation("ResumeLanguages");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.LanguageLevel", b =>
                {
                    b.Navigation("ResumeLanguages");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PaidPeriod", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PayoutFrequency", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PlaceOfWork", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.PreferredContactType", b =>
                {
                    b.Navigation("ResumeContacts");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Profession", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ProfessionalArea", b =>
                {
                    b.Navigation("Specializations");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Region", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Relation", b =>
                {
                    b.Navigation("CompanyRelations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.RelocationType", b =>
                {
                    b.Navigation("ResumeRelocation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Resume", b =>
                {
                    b.Navigation("ResumeCertificates");

                    b.Navigation("ResumeCitizenship");

                    b.Navigation("ResumeContacts");

                    b.Navigation("ResumeDriverLicenseTypes");

                    b.Navigation("ResumeEducation");

                    b.Navigation("ResumeEmployments");

                    b.Navigation("ResumeExperiences");

                    b.Navigation("ResumeKeySkills");

                    b.Navigation("ResumeLanguages");

                    b.Navigation("ResumePhoto");

                    b.Navigation("ResumePortfolios");

                    b.Navigation("ResumeRecommendations");

                    b.Navigation("ResumeRelocation");

                    b.Navigation("ResumeSalary");

                    b.Navigation("ResumeSchedules");

                    b.Navigation("ResumeSites");

                    b.Navigation("ResumeSkill");

                    b.Navigation("ResumeSpecializations");

                    b.Navigation("ResumeTotalExperience");

                    b.Navigation("ResumeTravelTime");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContact", b =>
                {
                    b.Navigation("ResumeContactPhone");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeContactsSiteType", b =>
                {
                    b.Navigation("ResumeSites");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeEducation", b =>
                {
                    b.Navigation("ResumeEducationAdditionally");

                    b.Navigation("ResumeEducationAttestations");

                    b.Navigation("ResumeEducationElementary");

                    b.Navigation("ResumeEducationPrimaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeRelocation", b =>
                {
                    b.Navigation("ResumeRelocationAreas");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.ResumeStatus", b =>
                {
                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Schedule", b =>
                {
                    b.Navigation("ResumeSchedules");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Skill", b =>
                {
                    b.Navigation("ResumeKeySkills");

                    b.Navigation("VacancyKeySkills");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Specialization", b =>
                {
                    b.Navigation("ResumeSpecializations");

                    b.Navigation("VacancySpecializations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Street", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.SubIndustry", b =>
                {
                    b.Navigation("CompanySubIndustries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.TravelTime", b =>
                {
                    b.Navigation("ResumeTravelTimes");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.University", b =>
                {
                    b.Navigation("UniversityFaculties");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.UniversityFaculty", b =>
                {
                    b.Navigation("ResumeEducationPrimaries");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.Vacancy", b =>
                {
                    b.Navigation("VacancyContact");

                    b.Navigation("VacancyDriverLicenseTypes");

                    b.Navigation("VacancyInformation");

                    b.Navigation("VacancyKeySkills");

                    b.Navigation("VacancySalary");

                    b.Navigation("VacancySpecializations");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyBillingType", b =>
                {
                    b.Navigation("VacancyInformation");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyContact", b =>
                {
                    b.Navigation("VacancyContactPhones");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.VacancyVisibilityType", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingDays", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingShift", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeIntervals", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("OnlineRecruitingPlatform.Model.Database.Entities.WorkingTimeModes", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
